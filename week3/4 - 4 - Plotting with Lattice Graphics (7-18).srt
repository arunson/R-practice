
1
00:00:00,000 --> 00:00:05,000
In addition to the base plotting system,
the other main mode of plotting for R is

2
00:00:05,000 --> 00:00:07,111
the lattice, is through the lattice
package.

3
00:00:07,111 --> 00:00:11,500
Remember we call it the lattice package.
It uses the grid package, to create a

4
00:00:11,500 --> 00:00:14,786
different style of plot from the standard
base package.

5
00:00:14,786 --> 00:00:19,431
And the main difference between lattice
and base is that the lattice functions

6
00:00:19,431 --> 00:00:24,006
generally create plots all in one go
rather than, kind of, creating a, the, the

7
00:00:24,006 --> 00:00:27,096
foundation of a plot, and then adding
points or adding texts or adding

8
00:00:27,096 --> 00:00:32,024
annotations, or things like that.
Most of the functions in lattice will try

9
00:00:32,024 --> 00:00:35,069
to make construct the entire plot from a
single function call.

10
00:00:35,069 --> 00:00:39,098
So, the main functions, in the lattice
package are the xyplot for creating

11
00:00:39,098 --> 00:00:43,007
scatter plots.
Bwplot for creating, what I called

12
00:00:43,007 --> 00:00:47,036
box-and-whisker plots, or just boxplots.
Histogram for creating histograms.

13
00:00:47,036 --> 00:00:51,876
Stripplot, it's kind of like a boxplot but
with, but with points instead of the

14
00:00:51,876 --> 00:00:53,021
boxes.
Dotplot.

15
00:00:53,175 --> 00:00:55,088
Splom, which stands for scatterplot
matrix.

16
00:00:56,141 --> 00:00:59,093
It is analogous to the pairs function in
the base graphic system.

17
00:00:59,093 --> 00:01:03,082
And then levelplot and contourplot are for
plotting, image data.

18
00:01:05,095 --> 00:01:10,037
The basic, approach of lattice functions
is that the first argument is usually a

19
00:01:10,037 --> 00:01:13,077
formula of some sort.
And the formula can look something like

20
00:01:13,077 --> 00:01:15,047
this.
So here, I've got y tilde x.

21
00:01:15,047 --> 00:01:18,050
So, you can think of y as being the
response of some sort.

22
00:01:18,050 --> 00:01:21,074
So, it's gonna be on the y axis.
X is the input, or so to speak.

23
00:01:21,262 --> 00:01:25,046
It's gonna be on the x axis.
And then the solidus, it represents

24
00:01:25,046 --> 00:01:28,075
conditioning on, f and g.
And f and g are typically going to be

25
00:01:28,075 --> 00:01:31,025
factors.
So, here we've got two different factors

26
00:01:31,025 --> 00:01:36,015
that are interacting with each other.
There won't, won't always be two different

27
00:01:36,015 --> 00:01:40,626
factors, often there will just be one.
But the idea is that, the are the strength

28
00:01:40,626 --> 00:01:46,001
of the lattice functions is that you can
plot, conditional relationships, where you

29
00:01:46,001 --> 00:01:51,013
condition on the relationship say between
x and y based on a third factor variable.

30
00:01:51,013 --> 00:01:56,360
So, for example f might represent, a
level, a factor variable categorizing men

31
00:01:56,360 --> 00:02:01,496
and women and you might now look at the,
relationship between x and y for both men

32
00:02:01,496 --> 00:02:03,563
and women separately.
So, So that.

33
00:02:03,563 --> 00:02:08,602
So, so the lattice function is very useful
for that kind of, for plotting that kind

34
00:02:08,602 --> 00:02:11,686
of data.
And then, so the lattice functions will

35
00:02:11,686 --> 00:02:16,216
usually take a data frame as a second
argument where the variables y, x, f and g

36
00:02:16,216 --> 00:02:18,475
will be looked up to, to find their
values.

37
00:02:18,645 --> 00:02:23,407
If there's no data frame pass then it will
look into the parent frame to see.

38
00:02:23,407 --> 00:02:30,044
To find the values of those variables.
So, lattice functions behave differently

39
00:02:30,044 --> 00:02:33,299
from base graphics functions in a, in a
very critical but subtle way.

40
00:02:33,299 --> 00:02:37,250
So, the idea with base graphics functions
is that they plot data directly onto the

41
00:02:37,250 --> 00:02:40,795
graphics device.
In more formal language it's, this is

42
00:02:40,795 --> 00:02:43,866
called having a side effect.
So, all of the base graphics functions

43
00:02:43,866 --> 00:02:47,714
have a side effect, which is that they
plot, data to the graphics device.

44
00:02:47,714 --> 00:02:52,243
Lattice graphics functions are a little
bit different because rather than plot

45
00:02:52,243 --> 00:02:56,117
something to the graphics device.
What they do is they return object of

46
00:02:56,117 --> 00:02:59,059
class trellis.
And so, they don't actually plot anything

47
00:02:59,059 --> 00:03:01,557
particularly.
All they do is they create an object that

48
00:03:01,557 --> 00:03:06,358
is designed for plotting and they return
it to you and that object has a special

49
00:03:06,358 --> 00:03:07,839
class.
It's called trellis.

50
00:03:07,998 --> 00:03:12,743
And then what happens is that when you
print that object, the print method does

51
00:03:12,743 --> 00:03:15,853
the work of plotting the data to the
graphics device.

52
00:03:15,853 --> 00:03:21,345
So, and so when you call that as function,
what happens is that even if you don't

53
00:03:21,345 --> 00:03:25,674
assign it to an object, the result of that
lattice will be auto-printed.

54
00:03:25,674 --> 00:03:30,758
And so, the auto printing will generate
the graphics onto, the, the plot on the

55
00:03:30,758 --> 00:03:33,989
graphics device.
So, it will look like things are just

56
00:03:33,989 --> 00:03:37,435
being plotted and that the lattice
functions have a side effect.

57
00:03:37,435 --> 00:03:42,572
But rather, the returned object is going
to, is, is auto-printed, to the graphics

58
00:03:42,572 --> 00:03:45,589
device.
Now in theory, that, what this means is

59
00:03:45,589 --> 00:03:50,159
that you, you can kinda save the object
that's returned by the lattice function

60
00:03:50,159 --> 00:03:53,223
and, and maybe save it to a file or
something like that.

61
00:03:53,575 --> 00:03:56,617
But usually that's not a very good, a very
good idea.

62
00:03:56,617 --> 00:04:01,209
It's usually better just to save the code
that created the, the object, and the data

63
00:04:01,209 --> 00:04:07,235
that are inputted.
Lattice functions also have a critical

64
00:04:07,235 --> 00:04:11,046
feature called a panel function.
And so, when you condition on, a factor

65
00:04:11,046 --> 00:04:15,414
variable in a formula, there's gonna be a
separate panel created for each level of

66
00:04:15,414 --> 00:04:18,526
the factor.
So for example, if you're conditioning on

67
00:04:18,526 --> 00:04:22,980
a factor variable that, that, that encodes
gender, and it has two levels, male and

68
00:04:22,980 --> 00:04:26,860
female, then what's going to happen is
that you're going to have a, a plot that

69
00:04:26,860 --> 00:04:30,491
has two pa-, two panels.
One panel for males, another panel for

70
00:04:30,491 --> 00:04:33,046
females.
And the panel function controls what

71
00:04:33,046 --> 00:04:35,959
happens inside each of these panels for
the entire plot.

72
00:04:35,959 --> 00:04:39,775
So, here I'm simulating some data, some
normal data that have a linear

73
00:04:39,775 --> 00:04:45,160
relationship, and I'm going to create a
factor variable, that has two groups

74
00:04:45,160 --> 00:04:50,001
labeled Group one and Group two.
So, ` if I call xy plot for y tilde x and

75
00:04:50,001 --> 00:04:53,019
then condition on f, you, this is the plot
that you get.

76
00:04:54,066 --> 00:05:00,632
So, you can see that there are two panels,
Group one, one for Group one and one for

77
00:05:00,632 --> 00:05:03,492
Group two.
And, and, and all that happens within each

78
00:05:03,492 --> 00:05:10,006
panel is that a scatterplot is created.
Now, I can modify my plot by adding a

79
00:05:10,006 --> 00:05:13,064
custom panel function.
So, that, so in the process, plot I just

80
00:05:13,064 --> 00:05:16,896
use the default panel function.
But, I can create my own panel function,

81
00:05:17,077 --> 00:05:22,036
by writing this little anonymous function
here, and the first two arguments are

82
00:05:22,036 --> 00:05:24,284
going to be x and y.
So, you can think, tho-, those are the x

83
00:05:24,284 --> 00:05:28,304
coordinates and the y coordinates of the
points that are going to be plotted in a

84
00:05:28,304 --> 00:05:31,555
specific panel.
So, it's not the, it's not all the data

85
00:05:31,555 --> 00:05:35,829
that you pass to the xy plot function,
it's just the data that appear in a given

86
00:05:35,829 --> 00:05:38,082
panel.
And so, what I'm going to do for, in, in

87
00:05:38,082 --> 00:05:42,559
my custom panel function, is I'm going to
call the panel dot xy plot function to

88
00:05:42,559 --> 00:05:45,914
just plot the data points and use all the
default options.

89
00:05:45,914 --> 00:05:50,577
So, all the default options are getting
passed through the dot, dot, dot argument.

90
00:05:50,767 --> 00:05:56,174
But I just want to do, I want to add one
extra thing, which is that I wanto add, I

91
00:05:56,174 --> 00:05:59,658
want to plot the median of the y values in
each panel.

92
00:05:59,658 --> 00:06:05,021
So, here I'm using panel.ab line, and I'm
saying, and I'm calculating the median of

93
00:06:05,021 --> 00:06:08,260
y and I'm going to specify a line type of
two.

94
00:06:08,260 --> 00:06:12,895
So, here I'm going to, I'm going to plot,
within each panel, I'm going to plot the

95
00:06:12,895 --> 00:06:16,683
median of y, in that panel, and it's gonna
be a dashed line.

96
00:06:16,683 --> 00:06:22,316
So, so, here you can see that I've used
these two functions, panel.xyplot and

97
00:06:22,316 --> 00:06:26,006
panel.abline.
You might recall that there's another

98
00:06:26,006 --> 00:06:30,013
function just called abline, which is used
in the base graphics system.

99
00:06:30,177 --> 00:06:34,083
But you cannot use functions from the base
plotting system, in a Lattice plot.

100
00:06:34,083 --> 00:06:39,030
So, lattice, for better or for worse has
duplicated many of those types of

101
00:06:39,030 --> 00:06:43,055
functions, in its own version.
So, you have to call the panel.abline

102
00:06:43,055 --> 00:06:46,020
function instead of just the abline
function.

103
00:06:46,350 --> 00:06:50,088
In the previous plot, I just added a
horizontal line for the median of y, but

104
00:06:50,088 --> 00:06:55,038
suppose I wanted to add a regression line
for each of the panels in my plot.

105
00:06:55,038 --> 00:06:59,714
So now I can, I can call my custom for
panel function after plotting the points

106
00:06:59,714 --> 00:07:04,945
with the panel.xyplot function.
I can call the panel.lmline function, and

107
00:07:04,945 --> 00:07:09,502
here I was supposed to find that I want
the regression line to be of colors equals

108
00:07:09,502 --> 00:07:13,646
too, which is, which is going to be, red.
So, here the panellmline function just

109
00:07:13,646 --> 00:07:16,086
adds an regression line to each of the
panels.
